{"version":3,"file":"Light.js","sources":["../../../src/lights/light/Light.ts"],"sourcesContent":["import { Geometry, Renderer, BLEND_MODES, DRAW_MODES } from '@pixi/core';\nimport { Layer } from '@pixi/layers';\nimport { Mesh } from '@pixi/mesh';\nimport { LayerFinder, lightGroup } from '../../LayerFinder';\nimport { LightShader } from './LightShader';\nimport { ViewportQuad } from './ViewportQuad';\n\n/**\n * Base light class.\n * @extends PIXI.Mesh\n * @memberof PIXI.lights\n */\nexport class Light extends Mesh\n{\n    /** Light height */\n    lightHeight: number;\n    /** Brightness */\n    brightness: number;\n    /** Shader name */\n    shaderName: string | null = null;\n    /** Use Viewport Quad */\n    readonly useViewportQuad: boolean;\n\n    /**\n     * @param {number} [color=0xFFFFFF] - The color of the light.\n     * @param {number} [brightness=1] - The brightness of the light, in range [0, 1].\n     * @param {PIXI.lights.LightShader} [material] -\n     * @param {Float32Array} [vertices] -\n     * @param {Uint16Array} [indices] -\n     */\n    constructor(color = 0x4d4d59, brightness = 0.8, material: LightShader,\n        vertices? : Float32Array, indices?: Uint16Array)\n    {\n        super(!vertices ? ViewportQuad._instance : new Geometry()\n            .addAttribute('aVertexPosition', vertices).addIndex(indices), material);\n\n        this.blendMode = BLEND_MODES.ADD;\n        const useViewportQuad = !vertices;\n\n        this.drawMode = useViewportQuad ? DRAW_MODES.TRIANGLE_STRIP : DRAW_MODES.TRIANGLES;\n\n        /**\n         * The height of the light from the viewport.\n         *\n         * @default 0.075\n         */\n        this.lightHeight = 0.075;\n\n        /**\n         * The falloff attenuation coeficients.\n         *\n         * @member {number[]}\n         * @default [0.75, 3, 20]\n         */\n        this.falloff = [0.75, 3, 20];\n\n        /**\n         * By default the light uses a viewport sized quad as the mesh.\n         *\n         * @member {boolean}\n         */\n        this.useViewportQuad = useViewportQuad;\n\n        // color and brightness are exposed through setters\n        this.tint = color ?? 0x4d4d59;\n        this.brightness = brightness;\n        this.parentGroup = lightGroup;\n    }\n\n    /**\n     * The color of the lighting.\n     */\n    get color(): number\n    {\n        return this.tint;\n    }\n    set color(val: number)\n    {\n        this.tint = val;\n    }\n\n    /**\n     * Falloff\n     * @member {number[]}\n     */\n    get falloff(): ArrayLike<number>\n    {\n        return this.material.uniforms.uLightFalloff;\n    }\n\n    set falloff(value: ArrayLike<number>)\n    {\n        this.material.uniforms.uLightFalloff[0] = value[0];\n        this.material.uniforms.uLightFalloff[1] = value[1];\n        this.material.uniforms.uLightFalloff[2] = value[2];\n    }\n\n    /**\n     * Last layer\n     * @type {PIXI.layers.Layer}\n     */\n    lastLayer: Layer | null = null;\n\n    /**\n     * Sync Shader\n     * @param {PIXI.Renderer} renderer - Renderer\n     */\n    syncShader(renderer: Renderer): void\n    {\n        const { uniforms } = this.shader;\n\n        // TODO: actually pass UV's of screen instead of size\n        uniforms.uViewSize[0] = renderer.screen.width;\n        uniforms.uViewSize[1] = renderer.screen.height;\n        uniforms.uViewPixels[0] = renderer.view.width;\n        uniforms.uViewPixels[1] = renderer.view.height;\n        uniforms.uFlipY = !renderer.framebuffer.current;\n        uniforms.uSampler = LayerFinder._instance.diffuseTexture;\n        uniforms.uNormalSampler = LayerFinder._instance.normalTexture;\n        uniforms.uUseViewportQuad = this.useViewportQuad;\n        uniforms.uBrightness = this.brightness;\n    }\n\n    _renderDefault(renderer: Renderer): void\n    {\n        if (!this._activeParentLayer)\n        {\n            return;\n        }\n        LayerFinder._instance.check(this._activeParentLayer);\n\n        const shader = this.shader as unknown as LightShader;\n\n        shader.alpha = this.worldAlpha;\n        if (shader.update)\n        {\n            shader.update();\n        }\n\n        renderer.batch.flush();\n\n        shader.uniforms.translationMatrix = this.transform.worldTransform.toArray(true);\n        if (this.useViewportQuad)\n        {\n            // TODO: pass the viewport (translated screen) instead\n            (this.geometry as ViewportQuad).update(renderer.screen);\n        }\n\n        this.syncShader(renderer);\n\n        renderer.shader.bind(shader);\n\n        renderer.state.set(this.state);\n\n        renderer.geometry.bind(this.geometry, shader);\n\n        renderer.geometry.draw(this.drawMode, this.size, this.start, this.geometry.instanceCount);\n    }\n}\n"],"names":["Mesh","ViewportQuad","Geometry","BLEND_MODES","DRAW_MODES","lightGroup","LayerFinder"],"mappings":";;;;;;;;;;;;;;;;;;MAYa,cAAcA,UAC3B;AAAA,EAiBI,YAAY,QAAQ,SAAU,aAAa,KAAK,UAC5C,UAA0B,SAC9B;AACI,UAAM,CAAC,WAAWC,0BAAa,YAAY,IAAIC,gBAC1C,aAAa,mBAAmB,QAAQ,EAAE,SAAS,OAAO,GAAG,QAAQ;AAf9E,sBAA4B;AAkF5B,qBAA0B;AAjEtB,SAAK,YAAYC,iBAAY;AAC7B,UAAM,kBAAkB,CAAC;AAEzB,SAAK,WAAW,kBAAkBC,gBAAW,iBAAiBA,gBAAW;AAOzE,SAAK,cAAc;AAQnB,SAAK,UAAU,CAAC,MAAM,GAAG,EAAE;AAO3B,SAAK,kBAAkB;AAGvB,SAAK,OAAO,SAAS;AACrB,SAAK,aAAa;AAClB,SAAK,cAAcC;AAAA;AACvB,EAKA,IAAI,QACJ;AACI,WAAO,KAAK;AAAA;AAChB,EACA,IAAI,MAAM,KACV;AACI,SAAK,OAAO;AAAA;AAChB,EAMA,IAAI,UACJ;AACI,WAAO,KAAK,SAAS,SAAS;AAAA;AAClC,EAEA,IAAI,QAAQ,OACZ;AACI,SAAK,SAAS,SAAS,cAAc,KAAK,MAAM;AAChD,SAAK,SAAS,SAAS,cAAc,KAAK,MAAM;AAChD,SAAK,SAAS,SAAS,cAAc,KAAK,MAAM;AAAA;AACpD,EAYA,WAAW,UACX;AACI,UAAM,EAAE,aAAa,KAAK;AAG1B,aAAS,UAAU,KAAK,SAAS,OAAO;AACxC,aAAS,UAAU,KAAK,SAAS,OAAO;AACxC,aAAS,YAAY,KAAK,SAAS,KAAK;AACxC,aAAS,YAAY,KAAK,SAAS,KAAK;AACxC,aAAS,SAAS,CAAC,SAAS,YAAY;AACxC,aAAS,WAAWC,wBAAY,UAAU;AAC1C,aAAS,iBAAiBA,wBAAY,UAAU;AAChD,aAAS,mBAAmB,KAAK;AACjC,aAAS,cAAc,KAAK;AAAA;AAChC,EAEA,eAAe,UACf;AACI,QAAI,CAAC,KAAK,oBACV;AACI;AAAA;AAEJ,4BAAY,UAAU,MAAM,KAAK,kBAAkB;AAEnD,UAAM,SAAS,KAAK;AAEpB,WAAO,QAAQ,KAAK;AACpB,QAAI,OAAO,QACX;AACI,aAAO;AAAO;AAGlB,aAAS,MAAM;AAEf,WAAO,SAAS,oBAAoB,KAAK,UAAU,eAAe,QAAQ,IAAI;AAC9E,QAAI,KAAK,iBACT;AAEI,MAAC,KAAK,SAA0B,OAAO,SAAS,MAAM;AAAA;AAG1D,SAAK,WAAW,QAAQ;AAExB,aAAS,OAAO,KAAK,MAAM;AAE3B,aAAS,MAAM,IAAI,KAAK,KAAK;AAE7B,aAAS,SAAS,KAAK,KAAK,UAAU,MAAM;AAE5C,aAAS,SAAS,KAAK,KAAK,UAAU,KAAK,MAAM,KAAK,OAAO,KAAK,SAAS,aAAa;AAAA;AAEhG;;;;"}