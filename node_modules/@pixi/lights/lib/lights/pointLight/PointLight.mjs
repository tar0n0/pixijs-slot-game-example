/*!
 * @pixi/lights - v4.0.0
 * Compiled Thu, 22 Dec 2022 00:00:35 UTC
 *
 * @pixi/lights is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 * 
 * Copyright 2017-2021, Ivan Popelyshev, All Rights Reserved
 */
import { Light } from '../light/Light.mjs';
import { Circle, DRAW_MODES } from '@pixi/core';
import { getCircleMesh } from '../../mixins/Circle.mjs';
import { PointLightShader } from './PointLightShader.mjs';

class PointLight extends Light {
  constructor(color = 16777215, brightness = 1, radius = Infinity) {
    if (radius !== Infinity) {
      const shape = new Circle(0, 0, radius);
      const { vertices, indices } = getCircleMesh(shape);
      super(color, brightness, new PointLightShader(), vertices, indices);
      this.drawMode = DRAW_MODES.TRIANGLE_FAN;
    } else {
      super(color, brightness, new PointLightShader());
    }
    this.shaderName = "pointLightShader";
    this.radius = radius;
  }
  get radius() {
    return this.material.uniforms.uLightRadius;
  }
  set radius(value) {
    this.material.uniforms.uLightRadius = value;
  }
}

export { PointLight };
//# sourceMappingURL=PointLight.mjs.map
