/*!
 * @pixi/lights - v4.0.0
 * Compiled Thu, 22 Dec 2022 00:00:35 UTC
 *
 * @pixi/lights is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 * 
 * Copyright 2017-2021, Ivan Popelyshev, All Rights Reserved
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Light = require('../light/Light.js');
var core = require('@pixi/core');
var Circle = require('../../mixins/Circle.js');
var PointLightShader = require('./PointLightShader.js');

class PointLight extends Light.Light {
  constructor(color = 16777215, brightness = 1, radius = Infinity) {
    if (radius !== Infinity) {
      const shape = new core.Circle(0, 0, radius);
      const { vertices, indices } = Circle.getCircleMesh(shape);
      super(color, brightness, new PointLightShader.PointLightShader(), vertices, indices);
      this.drawMode = core.DRAW_MODES.TRIANGLE_FAN;
    } else {
      super(color, brightness, new PointLightShader.PointLightShader());
    }
    this.shaderName = "pointLightShader";
    this.radius = radius;
  }
  get radius() {
    return this.material.uniforms.uLightRadius;
  }
  set radius(value) {
    this.material.uniforms.uLightRadius = value;
  }
}

exports.PointLight = PointLight;
//# sourceMappingURL=PointLight.js.map
