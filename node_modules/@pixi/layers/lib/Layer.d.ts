import { Container } from '@pixi/display';
import { Group } from './Group';
import { Rectangle, RenderTexture, Renderer } from '@pixi/core';
import type { DisplayObject, IDestroyOptions } from '@pixi/display';
import type { Stage } from './Stage';
import type { ILayeredRenderer } from './RendererMixin';
export declare class LayerTextureCache {
    layer: Layer;
    constructor(layer: Layer);
    private renderTexture;
    private doubleBuffer;
    private currentBufferIndex;
    _tempRenderTarget: RenderTexture;
    _tempRenderTargetSource: Rectangle;
    _tempRenderTargetDestination: Rectangle;
    private init;
    getRenderTexture(): RenderTexture;
    pushTexture(renderer: Renderer): void;
    popTexture(renderer: Renderer): void;
    destroy(): void;
}
export declare class Layer extends Container {
    readonly isLayer = true;
    group: Group;
    textureCache: LayerTextureCache;
    _activeChildren: Array<DisplayObject>;
    _tempChildren: Array<DisplayObject>;
    _activeStageParent: Stage;
    _sortedChildren: Array<DisplayObject>;
    _tempLayerParent: Layer;
    insertChildrenBeforeActive: boolean;
    insertChildrenAfterActive: boolean;
    constructor(group?: Group);
    get useRenderTexture(): boolean;
    set useRenderTexture(value: boolean);
    get useDoubleBuffer(): boolean;
    set useDoubleBuffer(value: boolean);
    get clearColor(): ArrayLike<number>;
    set clearColor(value: ArrayLike<number>);
    get sortPriority(): number;
    set sortPriority(value: number);
    getRenderTexture(): RenderTexture;
    doSort(): void;
    destroy(options?: IDestroyOptions): void;
    render(renderer: Renderer): void;
    layerRenderCanvas(renderer: any): void;
    _onBeginLayerSubtreeTraversal(stage: Stage): void;
    _onEndLayerSubtreeTraversal(): void;
    protected prerender(renderer: ILayeredRenderer): boolean;
    protected postrender(renderer: ILayeredRenderer): void;
}
